apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  ports:
  - port: 9092
    name: server
  - port: 7071
    name: prometheus
  clusterIP: None
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: kafka
  replicas: {{ kafka_replicas }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '7071'
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - kafka
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: kafka
        imagePullPolicy: Always
        image: dckreg:5000/kafka:{{ kafka_version }}
        ports:
        - containerPort: 9092
          name: server
        - containerPort: 7071
          name: prometheus
        env:
        - name: ZK
          value: "{{ zk_list }}"
        - name: NUM_PARTITIONS
          value: "{{ kafka_replicas }}"
        command: 
        - sh
        - -c
        - cp /tmp/kafka/server.properties.template /etc/kafka  && kafka-start.sh
        volumeMounts:
        - name: datadir
          mountPath: /data/kafka-logs
        - name: kafka-server-properties
          mountPath: /tmp/kafka/
      volumes:
        - name: kafka-server-properties
          configMap:
             name: kafka-server-properties
             items:
              - key: config
                path: server.properties.template
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ storage_class }}
      resources:
        requests:
          storage: {{ kafka_disk }}
